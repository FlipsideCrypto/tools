# File managed by Terraform
# Contents will be overwritten automatically
# To make changes edit the original template in internal-organization

name: 'terraform-setup'
description: 'Sets up Terraform including custom providers'
inputs:
  working-directory:
    description: 'Terraform working directory in the repository'
    required: true
  github-token:
    description: 'GitHub token for pulling custom providers from Flipside repos'
    required: true
  devops-bot-ssh-key:
    description: 'Devops bot SSH key to use for pulling Flipside repos'
    required: true
  devops-bot-known-hosts:
    description: 'Devops bot known hosts to use for pulling Flipside repos'
    required: true
  snowflake-bot-rsa-key:
    description: 'Snowflake bot RSA key to use for the Terraform Snowflake provider'
    required: true
  aws-access-key-id:
    description: >-
      AWS Access Key ID. This input is required if running in the GitHub hosted environment.
      It is optional if running in a self-hosted environment that already has AWS credentials,
      for example on an EC2 instance.
    required: false
  aws-secret-access-key:
    description: >-
      AWS Secret Access Key. This input is required if running in the GitHub hosted environment.
      It is optional if running in a self-hosted environment that already has AWS credentials,
      for example on an EC2 instance.
    required: false
  aws-session-token:
    description: 'AWS Session Token'
    required: false
  aws-region:
    description: 'AWS Region, e.g. us-east-2'
    required: true
outputs:
  snowflake-private-key-path:
    description: 'Snowflake private key path'
    value: ${{ steps.snowflake-environment.outputs.snowflake-private-key-path }}

runs:
  using: "composite"
  steps:
    - name: Install SSH key
      uses: shimataro/ssh-key-action@v2
      with:
        key: ${{ inputs.devops-bot-ssh-key }}
        known_hosts: ${{ inputs.devops-bot-known-hosts }}
        if_key_exists: replace
    - name: Install Snowflake RSA key
      uses: shimataro/ssh-key-action@v2
      with:
        name: snowflake_tf_snow_key
        key: ${{ inputs.snowflake-bot-rsa-key }}
        known_hosts: unnecessary
        if_key_exists: replace
    - name: Configure Snowflake authentication
      shell: bash
      id: snowflake-environment
      run: |
        ls -lhat "$HOME"/.ssh/
        echo "SNOWFLAKE_PRIVATE_KEY_PATH=${HOME}/.ssh/snowflake_tf_snow_key" >> $GITHUB_ENV
        echo "::set-output name=snowflake-private-key-path::${SNOWFLAKE_PRIVATE_KEY_PATH}"
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ inputs.aws-access-key-id }}
        aws-secret-access-key: ${{ inputs.aws-secret-access-key }}
        aws-session-token: ${{ inputs.aws-session-token }}
        aws-region: ${{ inputs.aws-region }}
    - uses: ./.github/actions/write-file
      with:
        path: ${{ inputs.working-directory }}/requirements.txt
        contents: |
          #
          # These requirements were autogenerated by pipenv
          # To regenerate from the project's Pipfile, run:
          #
          #    pipenv lock --requirements
          #
          # In the 'terraform-modules' repo, where the Pipfile for Terraform requirements is maintained.
          
          -i https://pypi.org/simple
          cachetools==5.0.0; python_version ~= '3.7'
          certifi==2021.10.8
          charset-normalizer==2.0.11; python_version >= '3'
          deepmerge==1.0.1
          gitdb==4.0.9; python_full_version >= '3.6.0'
          gitpython==3.1.26
          google-auth==2.6.0; python_version >= '2.7' and python_version not in '3.0, 3.1, 3.2, 3.3, 3.4, 3.5'
          idna==3.3; python_version >= '3'
          kubernetes==21.7.0
          oauthlib==3.2.0; python_full_version >= '3.6.0'
          pem==21.2.0
          pyasn1-modules==0.2.8
          pyasn1==0.4.8
          python-dateutil==2.8.2; python_version >= '2.7' and python_version not in '3.0, 3.1, 3.2, 3.3'
          pyyaml==6.0; python_full_version >= '3.6.0'
          requests-oauthlib==1.3.1; python_version >= '2.7' and python_version not in '3.0, 3.1, 3.2, 3.3'
          requests==2.27.1; python_version >= '2.7' and python_version not in '3.0, 3.1, 3.2, 3.3, 3.4, 3.5'
          retrying==1.3.3
          rsa==4.8; python_full_version >= '3.6.0'
          ruamel.yaml.clib==0.2.6; python_version < '3.11' and platform_python_implementation == 'CPython'
          ruamel.yaml==0.17.20
          setuptools==60.8.1; python_version >= '3.7'
          six==1.16.0; python_version >= '2.7' and python_version not in '3.0, 3.1, 3.2, 3.3'
          slack-sdk==3.14.0
          smmap==5.0.0; python_full_version >= '3.6.0'
          urllib3==1.26.8; python_version >= '2.7' and python_version not in '3.0, 3.1, 3.2, 3.3, 3.4' and python_version < '4'
          websocket-client==1.2.3; python_full_version >= '3.6.0'

    - name: Setup Python
      uses: actions/setup-python@v2
      with:
        python-version: 3.9
        cache: 'pip'
        cache-dependency-path: ${{ inputs.working-directory }}/requirements.txt
    - name: Install Terraform Python requirements
      shell: bash
      run: |
        pip install -r ${{ inputs.working-directory }}/requirements.txt
    - name: Use Node.js 14.x
      uses: actions/setup-node@v2
      with:
        node-version: "14.x"
    - uses: hashicorp/setup-terraform@v1
      with:
        terraform_version: 1.0.2
        terraform_wrapper: false
    - name: Setup Terraform plugin cache and local plugins root
      shell: bash
      run: |
        echo 'plugin_cache_dir="$HOME/.terraform.d/plugin-cache"' > ~/.terraformrc
        mkdir --parents ~/.terraform.d/plugin-cache
        mkdir --parents ~/.terraform.d/plugins/terraform.flipsidecrypto.com/local
    - name: Cache Terraform
      uses: actions/cache@v2
      with:
        path: |
          ~/.terraform.d/plugin-cache
          ~/.terraform.d/plugins
        key: ${{ runner.os }}-terraform-v2-${{ hashFiles('${{ inputs.working-directory }}/.terraform.lock.hcl') }}
    - name: Download latest custom Terraform providers
      shell: bash
      run: |
        set -euxo pipefail
        
        for provider_bin in terraform-provider-googleworkspace; do
          provider_name="${provider_bin##*-}"
        
          for platform in linux_amd64 darwin_amd64; do
            provider_dir="${HOME}/.terraform.d/plugins/terraform.flipsidecrypto.com/local/${provider_name}/9.99.9/${platform}"
            provider_bin_path="${provider_dir}/${provider_bin}"
        
            if [ -x "${provider_bin_path}" ]; then
              echo "${provider_bin_path} restored from cache"
            else
              mkdir -p custom-providers
              rm -rf custom-providers/*
              gh release download --pattern "${provider_bin}_*_${platform}.zip" --repo "FlipsideCrypto/${provider_bin}" --dir ./custom-providers
              mkdir -pv "$provider_dir"
          
              cd custom-providers
              unzip -o "*.zip"
              ls -lhat ./
              mv -fv "$provider_bin" "$provider_bin_path"
              cd -
          
              rm -rf custom-providers
              chmod +x "$provider_bin_path"
            fi
          done
        
          set +e
          if ! terraform init --upgrade; then
            rm -f .terraform.lock.hcl ||:
            terraform providers lock -platform=darwin_amd64 -platform=linux_amd64 "terraform.flipsidecrypto.com/local/${provider_name}"
          fi
          set -e
        done
      working-directory: ${{ inputs.working-directory }}
      env:
        GITHUB_TOKEN: ${{ inputs.github-token }}
    - name: Terraform Init
      shell: bash
      id: init
      run: |
        set -x
        set +e
        
        run_again=0
        
        if ! terraform init --upgrade; then
          rm -f .terraform.lock.hcl ||:
          terraform providers lock -platform=darwin_amd64 -platform=linux_amd64
          run_again=1
        fi
        set -e
        
        if $run_again -gt 0; then
          terraform init --upgrade
        fi
      working-directory: ${{ inputs.working-directory }}

